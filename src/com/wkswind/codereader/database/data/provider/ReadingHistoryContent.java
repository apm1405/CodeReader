package com.wkswind.codereader.database.data.provider;

import com.wkswind.codereader.database.data.provider.util.ColumnMetadata;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class ReadingHistoryContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + ReadingHistoryProvider.AUTHORITY);

    private ReadingHistoryContent() {
    }

    /**
     * Created in version 1
     */
    public static final class Wish extends ReadingHistoryContent {

        private static final String LOG_TAG = Wish.class.getSimpleName();

        public static final String TABLE_NAME = "wish";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/readinghistory-wish";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/readinghistory-wish";

        public static final Uri CONTENT_URI = Uri.parse(ReadingHistoryContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            URL("url", "text"),
            DATE_TIMESTAMP("dateTimestamp", "integer"),
            STARRED("starred", "integer");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.URL.getName(),
                Columns.DATE_TIMESTAMP.getName(),
                Columns.STARRED.getName()
        };

        private Wish() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (ReadingHistoryProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Wish | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType() + " , " + Columns.URL.getName() + " " + Columns.URL.getType() + ", " + Columns.DATE_TIMESTAMP.getName() + " " + Columns.DATE_TIMESTAMP.getType() + ", " + Columns.STARRED.getName() + " " + Columns.STARRED.getType() + ", PRIMARY KEY (" + Columns.ID.getName() + ")" + ");");

            db.execSQL("CREATE INDEX wish_url on " + TABLE_NAME + "(" + Columns.URL.getName() + ");");
            if (ReadingHistoryProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Wish | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (ReadingHistoryProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Wish | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (ReadingHistoryProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "Wish | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.ID.getName()).append(", ").append(Columns.URL.getName()).append(", ").append(Columns.DATE_TIMESTAMP.getName()).append(", ").append(Columns.STARRED.getName()).append(" ) VALUES (?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            stmt.bindLong(i++, values.getAsLong(Columns.ID.getName()));
            value = values.getAsString(Columns.URL.getName());
            stmt.bindString(i++, value != null ? value : "");
            stmt.bindLong(i++, values.getAsLong(Columns.DATE_TIMESTAMP.getName()));
            stmt.bindLong(i++, values.getAsLong(Columns.STARRED.getName()));
        }
    }
}

